"use client";

import { useState } from "react";

interface ShareModalProps {
  isOpen: boolean;
  onClose: () => void;
  contentCids?: {
    encryptedCid: string;
    summaryCid: string;
    signatureCid: string;
  };
  provenanceData?: {
    model: string;
    timestamp: string;
    verified: boolean;
  };
}

export default function ShareModal({
  isOpen,
  onClose,
  contentCids,
  provenanceData,
}: ShareModalProps) {
  const [copied, setCopied] = useState<string | null>(null);

  if (!isOpen) return null;

  const shareUrl = contentCids
    ? `https://aistudio.app/verify?content=${contentCids.encryptedCid}&metadata=${contentCids.summaryCid}&signature=${contentCids.signatureCid}`
    : "https://aistudio.app/content/demo-link";

  const handleCopy = async (text: string, type: string) => {
    await navigator.clipboard.writeText(text);
    setCopied(type);
    setTimeout(() => setCopied(null), 2000);
  };

  const shareOptions = [
    {
      id: "copy",
      icon: "üìã",
      label: "Copy Link",
      action: () => handleCopy(shareUrl, "link"),
    },
    {
      id: "certificate",
      icon: "üìÑ",
      label: "Download Certificate",
      action: () => alert("Downloading compliance certificate..."),
    },
    {
      id: "embed",
      icon: "üîó",
      label: "Embed Code",
      action: () => alert("Generating embed code..."),
    },
    {
      id: "compliance",
      icon: "‚öñÔ∏è",
      label: "Export Compliance",
      action: () => alert("Exporting EU AI Act compliance report..."),
    },
  ];

  return (
    <>
      <div className="overlay" onClick={onClose}></div>
      <div className="share-modal">
        <div className="text-center mb-6">
          <h2 className="text-xl font-bold text-gray-900 mb-2">
            Share Your Verified Content
          </h2>
          <p className="text-gray-600 text-sm">
            Anyone can verify this content's authenticity and AI provenance
          </p>
        </div>

        <div className="mb-4">
          <input
            className="w-full p-3 bg-gray-50 border-2 border-gray-200 rounded-lg font-mono text-sm"
            value={shareUrl}
            readOnly
            onClick={(e) => e.currentTarget.select()}
          />
        </div>

        <div className="grid grid-cols-2 gap-3 mb-6">
          {shareOptions.map((option) => (
            <div
              key={option.id}
              className="text-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer hover:border-blue-500 hover:bg-blue-50 transition-all"
              onClick={option.action}
            >
              <div className="text-2xl mb-1">{option.icon}</div>
              <div className="text-sm font-medium">
                {copied === option.id.replace("copy", "link") &&
                option.id === "copy"
                  ? "‚úÖ Copied!"
                  : option.label}
              </div>
            </div>
          ))}
        </div>

        {provenanceData && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-center gap-2 font-semibold text-green-700 mb-2">
              üîç What Others See
            </div>
            <div className="text-sm text-gray-700 space-y-1">
              <div>‚Ä¢ Content generated by {provenanceData.model}</div>
              <div>
                ‚Ä¢ Created on{" "}
                {new Date(provenanceData.timestamp).toLocaleDateString()}
              </div>
              <div>‚Ä¢ Verified by blockchain signature</div>
              <div>‚Ä¢ No modifications after generation</div>
              <div>‚Ä¢ Complies with AI disclosure requirements</div>
            </div>
          </div>
        )}

        <div className="mt-6 flex justify-center">
          <button
            onClick={onClose}
            className="px-6 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
          >
            Close
          </button>
        </div>
      </div>
    </>
  );
}
